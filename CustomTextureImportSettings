using System;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using UnityEditor;
using UnityEditor.Presets;
using UnityEngine;
#pragma warning disable 1591

// ReSharper disable StringIndexOfIsCultureSpecific.1
public class CustomTextureImportPostprocessor : AssetPostprocessor
{
    public static bool FirstLaunch = true;

    // имя папки: 'Assets/Presets/' + общая часть имени файлов: 'DefaultImportSettings_...'
    const string PresetsFolderPath = "Assets/Presets/DefaultImportSettings_";

    const string typePostfix = ".preset";

    // если нужно определить по имени файла
    enum textureCustomTypes
    {
        normal, // имя файла - DefaultImportSettings_normal 
        specular, // имя файла - DefaultImportSettings_specular
        cubemap = 2, // имя файла - DefaultImportSettings_cubemap
        UI = 3, // имя файла - DefaultImportSettings_UI
        level = 4 // имя файла - DefaultImportSettings_UI
    }


    // если нужно определить по имени папки
    enum FolderNameKeys
    {
        Cubemaps = 2, // имя файла - DefaultImportSettings_cubemap
        UI = 3, // но пресетка должна лежать в той же общей папке PresetsFolderPath
        GUI = 3, // пресетка будет общая
        Levels = 4,
    }


    void OnPostprocessTexture(Texture2D texture)
    {
        if (!isFirstLaunch(assetImporter, texture))
            return;


        string lowerTextureName = texture.name.ToLower();

        var folderPathSplitted = assetPath.Split('/');

        var folderPath = assetPath.Split(new[] {folderPathSplitted[folderPathSplitted.Length - 1]},
            StringSplitOptions.None)[0];

        folderPath = folderPath.Remove(folderPath.Length - 1);

        var types = Enum.GetNames(typeof(textureCustomTypes));


        // по типам
        for (int i = 0; i < types.Length - 1; i++)
        {
            if (lowerTextureName.Contains(types[i]))
            {
                var preset = AssetDatabase.LoadAssetAtPath<Preset>(PresetsFolderPath + types[i] + typePostfix);

                if (Apply(preset, texture)) return;
            }
        }

        var presets = AssetDatabase.FindAssets("t:Preset", new[] {folderPath});

        if (presets.Length > 0)
        {
            var preset = AssetDatabase.LoadAssetAtPath<Preset>(AssetDatabase.GUIDToAssetPath(presets[0]));
            if (Apply(preset, texture)) return;
        }


        var folderNameKeys = Enum.GetValues(typeof(FolderNameKeys));

        var FolderNames = folderPathSplitted;


        for (int i = FolderNames.Length - 1; i >= 0; i--) // самая нижняя папка в приоритете
        for (int j = 0; j < folderNameKeys.Length; j++)
        {
            var folderName = FolderNames[i];
            var type = (FolderNameKeys) folderNameKeys.GetValue(j);

            //Debug.Log(folderName + " " + Enum.IsDefined(typeof(FolderNameKeys),folderName));

            if (Enum.IsDefined(typeof(FolderNameKeys), folderName))
            {
                FolderNameKeys parsedFolderName = (FolderNameKeys) Enum.Parse(typeof(FolderNameKeys), FolderNames[i]);
                //Debug.Log(PresetsFolderPath + (textureCustomTypes) parsedFolderName);

                var preset =
                    AssetDatabase.LoadAssetAtPath<Preset>(PresetsFolderPath + (textureCustomTypes) parsedFolderName +
                                                          typePostfix);
                if (Apply(preset, texture)) return;
            }
        }

        Debug.Log("preset NOT found");
    }

    bool Apply(Preset preset, Texture2D tex)
    {
        if (!preset)
        {
            //Debug.Log("preset NOT found");
            return false;
        }

        Debug.Log("настройки импорта из " + preset, preset);
        Debug.Log("применены к " + tex.name, assetImporter);
        preset.ApplyTo(assetImporter);
        
        var s = assetImporter.userData;
        var foundValue = false;

        if (s.Length == 0)
        {
            s = key;
        }
        else
        {
            foundValue = s.Contains(key);
        }

        if (!foundValue)
        {
            s += key;
            Debug.Log("first import for " + tex.name);
        }
        else
        {
            Debug.Log("already imported" + tex.name);
        }
        assetImporter.userData = s;
        AssetDatabase.WriteImportSettingsIfDirty(assetImporter.assetPath);

        //assetImporter.SaveAndReimport();
        //EditorUtility.SetDirty(assetImporter);
        return true;
    }


    bool isFirstLaunch(AssetImporter importer, Texture2D tex)
    {
        if (FirstLaunch)
        {
            Debug.Log("first lanch = true");

            if (EditorPrefs.HasKey(key))
            {
                Debug.Log("has key");
                FirstLaunch = EditorPrefs.GetBool(key);
            }
        }

        Debug.Log("first lanch = " + FirstLaunch);
        if (FirstLaunch)
        {
            Debug.Log("first launch");

            if (EditorUtility.DisplayDialog("ВНИМАНИЕ",
                "Вы в первый раз запустили CustomTextureImportPostprocessor, отметить все текстуры, как уже обработанные, чтобы избежать изменения их настроек импорта?",
                "да", "нет"))
            {
                AssetDatabase.StartAssetEditing();

                var texGUIDs = AssetDatabase.FindAssets("t:Texture2D", new[] {"Assets"});


                var targetGUID = new GUID(AssetDatabase.AssetPathToGUID(assetImporter.assetPath));
                var counter = 0;
                var count = texGUIDs.Length;
                for (int i = 0; i < count; i++)
                {

                    if (!targetGUID.Equals(new GUID(texGUIDs[i])))
                    {
                        AssetDatabase.ImportAsset(AssetDatabase.GUIDToAssetPath(texGUIDs[i]));
                        counter++;
                    }
                }
                AssetDatabase.StopAssetEditing();

                Debug.Log("обработано: " + counter + " текстур");

                FirstLaunch = false;
                EditorPrefs.SetBool(key, FirstLaunch);
                
            }
        }

        
        var s = importer.userData;
        var foundValue = false;

        if (s.Length == 0)
        {
            s = key;
        }
        else
        {
            foundValue = s.Contains(key);
        }

        if (!foundValue)
        {
            s += key;
            Debug.Log("first import for " + tex.name);
        }
        else
        {
            Debug.Log("already imported" + tex.name);
        }

        importer.userData = s;

        
        return !foundValue;
    }

    const string key = " CustomTextureImportPostprocessor_FirstLaunch ";

    [MenuItem("Tools/Custom Texture Importer/Reset first launch")]
    public static void ResetFirstLaunch()
    {
        EditorPrefs.SetBool(key, true);
        
        var texGUIDs = AssetDatabase.FindAssets("t:Texture2D", new[] {"Assets"});
        
        AssetDatabase.ImportAsset(AssetDatabase.GUIDToAssetPath(texGUIDs[0]));
        
    }
}
